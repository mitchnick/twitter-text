c
span
c
span
c
html_data = open('http://web.archive.org/web/20090220003702/http://www.sitepoint.com/').read
doc.search('p').first.to_s
doc.search('p').count
doc.search('p')
doc.search('a')
doc.to_html
doc
doc = Nokogiri::HTML(open("http://www.threescompany.com/"))
require 'open-uri'
</div>
   </ul>
      <li><a data-category="news" href="http://www.nytimes.com">New York Times</a></li>
      <li><a href="http://kathack.com/">Kathack</a></li>
      <li><a data-category="news" href="http://reddit.com">Reddit</a></li>
      <li><a href="http://youtube.com">YouTube</a></li>
   <ul>
   <p>Here are some entertaining links:</p>
<div id="funstuff">
</div>
   <p>Don't want to learn Ruby? Then give <a href="http://learnpythonthehardway.org/">Zed Shaw's Learn Python the Hard Way</a> a try</p>
   <p>Or you can <a href="http://www.bing.com">click here to go</a> to Microsoft Bing.</p>
   <p><a href="http://www.google.com">Click here</a> to go to the search engine Google</p>
<div id="references">
new_html = <h1>Hello Webpage!</h1>
span.children.last.attributes
span.children.last
span.children.last.at_css('.hidden')
span.children.last.at_css('hidden')
span.children.last
span.children.first
span
span.at_css('hidden')
span.text.strip
span.text
span.content
span.at_css('atwho-inserted').content
span
exit
spanc
span.to_html.text
span.to_html
span
c
span["data-factual-id"]
span
span.first.class
span.class
span
span.first
span = html_content.first
spans
span
span.text
span = html_content.first
html_content.first.to_s
html_content.count
html_content
c
Nokogiri::XML(text)
nono.children[1].children
nono.children
nono.children.first
nono.children.first.children
nono.children.rist.children
nono.children
nono
nono[1]
nono[3]
nono[4]
nono = Nokogiri::HTML(text)
spans.last.attribute('data-factual-id')
spans.last
c
html_content.last.attribute("data-factual-id")
html_content.first.attribute("data-factual-id")
html_content.first
html_content
Nokogiri::HTML(text).css("span[@data-factual-id]")
Nokogiri::HTML(text).css("span")[1].@data
Nokogiri::HTML(text).css("span")[1].data
Nokogiri::HTML(text).css("span")[1].data-factual-id
Nokogiri::HTML(text).css("span")[1]
Nokogiri::HTML(text).css("span")[1].
Nokogiri::HTML(text).css("span")[1].to_s
text
Nokogiri::HTML(text).css("span[data-factual-id]")
Nokogiri::HTML(text).css("span")[1].to_s
html_content
c
Nokogiri::HTML(text).css("span")[1].to_s
Nokogiri::HTML(text).css("span")[1].attr
Nokogiri::HTML(text).css("span")[1].attributes
Nokogiri::HTML(text).css("span")[1]
Nokogiri::HTML(text).css("span").count
Nokogiri::HTML(text).css("span")
page.css("span")
page.css("li[data-category='news']")
Nokogiri::HTML(text).css("span[data-factual-id]")
Nokogiri::HTML(text).search("span[data-factual-id]")
text
html_content
c
span
html_content.children[1].to_s
html_content.children[1].attributes.to_s
html_content.children[1].attributes
html_content.children[1]
html_content
span = html_content.first.to_html
span = html_content.first
html_content.first = span
html_content.first.text
html_content = Nokogiri::HTML(text).search("span.atwho-inserted")
html_content = Nokogiri::HTML(text).css('data-factual-id')
html_content.first.css('data-factual-id')
html_content.first
html_content = Nokogiri::HTML(text).search("span.atwho-inserted")
text
html_content
html_content.css('data-factual-id')
html_content = Nokogiri::HTML(text).search("data-factual-id")
text
html_content.count
html_content
html_content.children[2].children
html_content.children[1].children
html_content.children[0].children
html_content.children.children
html_content.children[3]
html_content.children[2]
html_content.children[1]
html_content.children.first
html_content.data-factual-id
html_content.children
html_content.class
html_content.first.to_s
html_content.first
html_content..first
html_content.html_content.children
html_content.children
html_content.to_html
html_content.last
html_content.first
html_content
c
Nokogiri::HTML(text).search("span.atwho-inserted")
Nokogiri::HTML(text).search("span")
Nokogiri::HTML(text)
text.split(/\^/)
place_text
hat
before
c
text.scan(/\^/)
text.scan("^")
text.span("^")
text
&block
text
c
@link = Nokogiri::HTML(text).search("a[@href='/places/find_by_factual?q=#{place}']")c
@link = Nokogiri::HTML(text).search("a[@href='/places/find_by_factual?q=#{place}']")
c
"a[@href='/places/find_by_factual?q=#{place}']"
@link = Nokogiri::HTML(text).search("a[@href='/places/find_by_factual?q=#{place}']")
place
@link
c
text
place
c
@link = Nokogiri::HTML(text).search("a.username-url")
text
@link
c
@link = Nokogiri::HTML(text).search("a[@href='/tags/#{hashtag.sub(/^#/, '')}']")
hashtag.sub(/^#/, '')
@link
hashtag.sub(/^#/, '%23')
hashtag
text
@link
