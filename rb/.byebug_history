c
start_position_within_html_block?(html_excluded_indices, start_position)
html_excluded_indices
html_excluded-indices
end_position
start_position
c
html_excluded_indices.present?
html_excluded_indices.nil?
html_excluded_indices.count
start_position
html_excluded_indices
c
protocol
end_position
start_position
c
start_position
html_exclueded_indices
c
text.to_s
text.to)s
before
all
c
valid_url_match_data
valid_url_match_data = $~
c
before
c
before
c
url
before
all
c
before
all
text
c
html_content.to_html
html_content = Nokogiri::HTML(text).search("a[href]")
c
text
query
path
port
domain
protocol
url
before
all
c
name
place
@link.inner_text
@link
c
text
c
chars[entity[:indices].first]
chars
options
html_attrs
href
name_chunk
at
entity
c
@link.inner_text
@link
c
text
c
text
c
text
@link.text
@link
c
span.text.tr("^","")
span.text.tr("_"," ")
span.text.tr(" ","_")
span.text
c
text
@link.to_html
@link.to_hmtl
@link.count
@link
text
place
@link
@link.text
@link
@link.inner_text
@link
c
place
name
c
@autolinked_text
c
@autolinked_text
c
@autolinked_text
c
@autolinked_text
c
@link = Nokogiri::HTML(text).search("a[@href='/places/find_by_factual?q=#{place}']")
@link
c
entity
c
entity
c
span.to_s
text.index(span.to_s)
text
start_position
length
c
length
c
end_position = start_position + length
start_position = text.index(span.to_s)
length = span.to_html.length
c
text.index(span.to_s)
text.index(/data/)
text.match(/data/)
text.scan(span.to_s)
text.match(span.to_s)
span.to_s
html_content.to_s
html_content
span.to_html.length
c
html_content.index
span.index
span.to_html.length
text.length
text
span.length
span
c
html_content.content
html_content.contnet
html_content.to_html
html_content.text
html_content.content
html_content.string
html_content.replace "^nyc"
html_content.to_html
html_content
html_content = Nokogiri::HTML(text).search("span.atwho-inserted")
text = return_text
return_text
c
options
chars
text
entity
c
span.children[1].attributes["data-factual-id"].text
span.children[1].attributes["data-factual-id"]
span.children[1].attributes
span.children
span.attributes.children
span.attributes
span
span.text["data-factual-id"]
span["data-factual-id"]
span.css('span')["data-factual-id"]
span
span.css('span')
span.xpath('//data-factual-id')
html_content = Nokogiri::HTML(text).search("span.atwho-inserted")
span
c
span.css('span[data-factual-id]').content
span.css('span[data-factual-id]').text
span.css('span[data-factual-id]')
span.css('span')
span.css(span)
span.css
span
data
span.css('[data-factual-id]').text
span.css('[data-factual-id]').value
span.css('[data-factual-id]').first
span.css('[data-factual-id]')
span.css('data-factual-id')
span.to_s
span.children[1].data-factual-id
span.children[1]
span.children
span.data-factual-id
span.search('data-factual-id')
span
c
span
c
span
c
html_data = open('http://web.archive.org/web/20090220003702/http://www.sitepoint.com/').read
doc.search('p').first.to_s
doc.search('p').count
doc.search('p')
doc.search('a')
doc.to_html
doc
doc = Nokogiri::HTML(open("http://www.threescompany.com/"))
require 'open-uri'
</div>
   </ul>
      <li><a data-category="news" href="http://www.nytimes.com">New York Times</a></li>
      <li><a href="http://kathack.com/">Kathack</a></li>
      <li><a data-category="news" href="http://reddit.com">Reddit</a></li>
      <li><a href="http://youtube.com">YouTube</a></li>
   <ul>
   <p>Here are some entertaining links:</p>
<div id="funstuff">
</div>
   <p>Don't want to learn Ruby? Then give <a href="http://learnpythonthehardway.org/">Zed Shaw's Learn Python the Hard Way</a> a try</p>
   <p>Or you can <a href="http://www.bing.com">click here to go</a> to Microsoft Bing.</p>
   <p><a href="http://www.google.com">Click here</a> to go to the search engine Google</p>
<div id="references">
new_html = <h1>Hello Webpage!</h1>
span.children.last.attributes
span.children.last
span.children.last.at_css('.hidden')
span.children.last.at_css('hidden')
span.children.last
span.children.first
span
span.at_css('hidden')
span.text.strip
span.text
span.content
span.at_css('atwho-inserted').content
span
exit
spanc
span.to_html.text
span.to_html
span
c
span["data-factual-id"]
span
span.first.class
span.class
span
span.first
span = html_content.first
spans
